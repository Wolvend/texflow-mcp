--- texflow.py.original
+++ texflow.py.semantic
@@ -14,6 +14,7 @@
 from typing import Dict, List, Optional, Any
 import logging
 from datetime import datetime
+from src.texflow_semantic import create_semantic_tools
 
 # Configure logging
 logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
@@ -1234,6 +1235,17 @@ async def main():
     
     texflow = TeXFlow()
     
+    # Register semantic tools (NEW)
+    semantic_tools = create_semantic_tools(texflow)
+    
+    for tool in semantic_tools:
+        @server.tool(
+            name=tool["name"],
+            description=tool["description"],
+            input_schema=tool["input_schema"]
+        )
+        async def handle_semantic(arguments, tool_handler=tool["handler"]):
+            return tool_handler(arguments)
+    
+    # Keep only essential system management tools for direct access
     @server.tool(
         name="list_printers",
         description="List all available CUPS printers."
@@ -1250,6 +1262,11 @@ async def main():
     async def get_printer_info(arguments: GetPrinterInfoArgs) -> str:
         return texflow.get_printer_info(arguments.printer_name)
     
+    # Comment out or remove the 25+ individual document/output/project tools
+    # They are now handled by the semantic layer
+    
+    """
+    # These tools are now handled by semantic operations:
     @server.tool(
         name="save_markdown",
         description="Save markdown content to a file."
@@ -1386,6 +1403,7 @@ async def main():
     )
     async def read_document(arguments: ReadDocumentArgs) -> str:
         return texflow.read_document(arguments.file_path, arguments.offset, arguments.limit)
+    """
     
     logger.info(f"TeXFlow MCP Server running with {len(server._tools)} tools")
     await server.run()