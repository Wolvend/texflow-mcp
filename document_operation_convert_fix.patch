--- a/src/features/document/document_operation.py
+++ b/src/features/document/document_operation.py
@@ -353,56 +353,31 @@
     def _convert_document(self, params: Dict[str, Any], context: Dict[str, Any]) -> Dict[str, Any]:
-        """Convert document between formats."""
+        """Convert document between formats using core conversion service."""
         source = params.get("source")
         target_format = params.get("target_format", "latex")
         output_path = params.get("output_path")
         
         if not source:
             return {"error": "Source parameter is required"}
         
-        # Detect source format
-        source_format = self._detect_format_from_path(source)
-        
-        if source_format == target_format:
-            return {"error": f"Source and target formats are the same: {source_format}"}
-        
         try:
-            # Currently only markdown to latex is supported
-            if source_format == "markdown" and target_format == "latex":
-                import subprocess
-                
-                source_path = texflow.resolve_path(source)
-                if not source_path.exists():
-                    return {"error": f"Source file not found: {source_path}"}
-                
-                # Generate output path if not provided
-                if not output_path:
-                    output_file = source_path.with_suffix(".tex")
-                else:
-                    output_file = texflow.resolve_path(output_path)
-                
-                # Convert using pandoc
-                try:
-                    subprocess.run(
-                        ["pandoc", "-f", "markdown", "-t", "latex", "-s", "-o", str(output_file), str(source_path)], 
-                        check=True
-                    )
-                    
-                    return {
-                        "success": True,
-                        "source": str(source_path),
-                        "source_format": source_format,
-                        "target_format": target_format,
-                        "output": str(output_file),
-                        "message": f"Converted to {target_format}: {output_file}"
-                    }
-                except subprocess.CalledProcessError as e:
-                    return {"error": f"Conversion failed: {e}"}
-                except FileNotFoundError:
-                    return {"error": "pandoc not found - install pandoc for format conversion"}
-            else:
-                return {
-                    "error": f"Conversion from {source_format} to {target_format} not supported",
-                    "supported_conversions": ["markdown -> latex"]
-                }
+            # Resolve paths
+            source_path = texflow.resolve_path(source)
+            if output_path:
+                output_path = texflow.resolve_path(output_path)
+            
+            # Use core conversion service
+            result = self.conversion_service.convert(source_path, target_format, output_path)
+            
+            # Add semantic enhancements on success
+            if result.get("success"):
+                result["workflow"] = {
+                    "message": f"Document converted to {target_format} successfully",
+                    "next_steps": []
+                }
+                
+                # Add format-specific suggestions
+                if target_format == "latex":
+                    result["workflow"]["next_steps"].extend([
+                        {"action": "validate", "description": "Check LaTeX syntax before compiling"},
+                        {"action": "export", "description": "Generate PDF from LaTeX"}
+                    ])
+                elif target_format == "pdf":
+                    result["workflow"]["next_steps"].extend([
+                        {"action": "inspect", "description": "Preview the generated PDF"},
+                        {"action": "print", "description": "Send to printer"}
+                    ])
+            
+            return result
                 
         except Exception as e:
-            return {"error": str(e), "source": source}
+            return {"error": str(e)}